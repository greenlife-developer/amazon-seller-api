"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Sellers
 * The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SellersApi = exports.SellersApiFactory = exports.SellersApiFp = exports.SellersApiAxiosParamCreator = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SellersApi - axios parameter creator
 * @export
 */
const SellersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of marketplaces that the seller submitting the request can sell in and information about the seller\'s participation in those marketplaces.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .016 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplaceParticipations: async (options = {}) => {
            const localVarPath = `/sellers/v1/marketplaceParticipations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SellersApiAxiosParamCreator = SellersApiAxiosParamCreator;
/**
 * SellersApi - functional programming interface
 * @export
 */
const SellersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SellersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns a list of marketplaces that the seller submitting the request can sell in and information about the seller\'s participation in those marketplaces.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .016 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketplaceParticipations(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketplaceParticipations(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.SellersApiFp = SellersApiFp;
/**
 * SellersApi - factory interface
 * @export
 */
const SellersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SellersApiFp)(configuration);
    return {
        /**
         * Returns a list of marketplaces that the seller submitting the request can sell in and information about the seller\'s participation in those marketplaces.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .016 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplaceParticipations(options) {
            return localVarFp.getMarketplaceParticipations(options).then((request) => request(axios, basePath));
        },
    };
};
exports.SellersApiFactory = SellersApiFactory;
/**
 * SellersApi - object-oriented interface
 * @export
 * @class SellersApi
 * @extends {BaseAPI}
 */
class SellersApi extends base_1.BaseAPI {
    /**
     * Returns a list of marketplaces that the seller submitting the request can sell in and information about the seller\'s participation in those marketplaces.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .016 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellersApi
     */
    getMarketplaceParticipations(options) {
        return (0, exports.SellersApiFp)(this.configuration).getMarketplaceParticipations(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SellersApi = SellersApi;
