import process from 'process';
import { AccessTokenFactory } from './access-token';
import { SecurityTokenService } from './sts';
import { packageJson } from './utils/package';
/**
 * Class for simplify auth with Selling Partner API
 */
export class SellingPartnerApiAuth {
    accessToken;
    _sts;
    _accessKeyId;
    _secretAccessKey;
    _sessionToken;
    constructor(parameters) {
        const clientId = parameters.clientId ?? process.env.LWA_CLIENT_ID;
        const clientSecret = parameters.clientSecret ?? process.env.LWA_CLIENT_SECRET;
        const accessKeyId = parameters.accessKeyId ?? process.env.AWS_ACCESS_KEY_ID;
        const secretAccessKey = parameters.secretAccessKey ?? process.env.AWS_SECRET_ACCESS_KEY;
        const sessionToken = parameters.sessionToken ?? process.env.AWS_SESSION_TOKEN;
        const region = parameters.region ?? process.env.AWS_DEFAULT_REGION;
        const roleArn = parameters.role?.arn ?? process.env.AWS_ROLE_ARN;
        const roleSessionName = parameters.role?.sessionName ??
            process.env.AWS_ROLE_SESSION_NAME ??
            `sp-api-sdk-auth@${packageJson.version}`;
        let role = null;
        if (roleArn) {
            role = {
                arn: roleArn,
                sessionName: roleSessionName,
            };
        }
        if (!clientId) {
            throw new Error('Missing required `clientId` configuration value');
        }
        if (!clientSecret) {
            throw new Error('Missing required `clientSecret` configuration value');
        }
        if (!accessKeyId) {
            throw new Error('Missing required `accessKeyId` configuration value');
        }
        if (!secretAccessKey) {
            throw new Error('Missing required `secretAccessKey` configuration value');
        }
        this._accessKeyId = accessKeyId;
        this._secretAccessKey = secretAccessKey;
        this._sessionToken = sessionToken;
        if (parameters.refreshToken) {
            this.accessToken = new AccessTokenFactory({
                clientId,
                clientSecret,
                refreshToken: parameters.refreshToken,
            });
        }
        else if (parameters.scopes) {
            this.accessToken = new AccessTokenFactory({
                clientId,
                clientSecret,
                scopes: parameters.scopes,
            });
        }
        else {
            throw new TypeError('Either `refreshToken` or `scopes` must be specified');
        }
        if (role) {
            this._sts = new SecurityTokenService({
                accessKeyId,
                secretAccessKey,
                sessionToken,
                region,
                role,
            });
        }
    }
    /**
     * Get AWS credentials from STS or user
     */
    async getCredentials() {
        if (this._sts) {
            return this._sts.getCredentials();
        }
        return {
            AccessKeyId: this._accessKeyId,
            SecretAccessKey: this._secretAccessKey,
            SessionToken: this._sessionToken,
        };
    }
}
export { SellingPartnerApiAuthError } from './error';
export { AuthorizationScope } from './types/scope';
