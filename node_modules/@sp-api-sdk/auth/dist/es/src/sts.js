import { STS } from '@aws-sdk/client-sts';
export class SecurityTokenService {
    accessKeyId;
    secretAccessKey;
    sessionToken;
    role;
    region;
    _credentials;
    constructor(parameters) {
        this.accessKeyId = parameters.accessKeyId;
        this.secretAccessKey = parameters.secretAccessKey;
        this.sessionToken = parameters.sessionToken;
        this.role = parameters.role;
        this.region = parameters.region;
    }
    /**
     * Get the AWS credentials from STS
     */
    async getCredentials() {
        if (!this._credentials ||
            (this._credentials?.Expiration && Date.now() >= this._credentials.Expiration.getTime())) {
            this._credentials = await this.fetchCredentials();
        }
        return this._credentials;
    }
    /**
     * Fetch new AWS credentials from STS
     */
    async fetchCredentials() {
        const config = {
            credentials: {
                accessKeyId: this.accessKeyId,
                secretAccessKey: this.secretAccessKey,
                sessionToken: this.sessionToken,
            },
        };
        if (this.region) {
            config.region = this.region;
        }
        const sts = new STS(config);
        const { Credentials: credentials } = await sts.assumeRole({
            RoleArn: this.role.arn,
            RoleSessionName: this.role.sessionName,
        });
        if (!credentials) {
            throw new Error('Provided AWS credentials were invalid: could not sts:AssumeRole');
        }
        return credentials;
    }
}
