"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizationScope = exports.SellingPartnerApiAuthError = exports.SellingPartnerApiAuth = void 0;
const tslib_1 = require("tslib");
const process_1 = tslib_1.__importDefault(require("process"));
const access_token_1 = require("./access-token");
const sts_1 = require("./sts");
const package_1 = require("./utils/package");
/**
 * Class for simplify auth with Selling Partner API
 */
class SellingPartnerApiAuth {
    accessToken;
    _sts;
    _accessKeyId;
    _secretAccessKey;
    _sessionToken;
    constructor(parameters) {
        const clientId = parameters.clientId ?? process_1.default.env.LWA_CLIENT_ID;
        const clientSecret = parameters.clientSecret ?? process_1.default.env.LWA_CLIENT_SECRET;
        const accessKeyId = parameters.accessKeyId ?? process_1.default.env.AWS_ACCESS_KEY_ID;
        const secretAccessKey = parameters.secretAccessKey ?? process_1.default.env.AWS_SECRET_ACCESS_KEY;
        const sessionToken = parameters.sessionToken ?? process_1.default.env.AWS_SESSION_TOKEN;
        const region = parameters.region ?? process_1.default.env.AWS_DEFAULT_REGION;
        const roleArn = parameters.role?.arn ?? process_1.default.env.AWS_ROLE_ARN;
        const roleSessionName = parameters.role?.sessionName ??
            process_1.default.env.AWS_ROLE_SESSION_NAME ??
            `sp-api-sdk-auth@${package_1.packageJson.version}`;
        let role = null;
        if (roleArn) {
            role = {
                arn: roleArn,
                sessionName: roleSessionName,
            };
        }
        if (!clientId) {
            throw new Error('Missing required `clientId` configuration value');
        }
        if (!clientSecret) {
            throw new Error('Missing required `clientSecret` configuration value');
        }
        if (!accessKeyId) {
            throw new Error('Missing required `accessKeyId` configuration value');
        }
        if (!secretAccessKey) {
            throw new Error('Missing required `secretAccessKey` configuration value');
        }
        this._accessKeyId = accessKeyId;
        this._secretAccessKey = secretAccessKey;
        this._sessionToken = sessionToken;
        if (parameters.refreshToken) {
            this.accessToken = new access_token_1.AccessTokenFactory({
                clientId,
                clientSecret,
                refreshToken: parameters.refreshToken,
            });
        }
        else if (parameters.scopes) {
            this.accessToken = new access_token_1.AccessTokenFactory({
                clientId,
                clientSecret,
                scopes: parameters.scopes,
            });
        }
        else {
            throw new TypeError('Either `refreshToken` or `scopes` must be specified');
        }
        if (role) {
            this._sts = new sts_1.SecurityTokenService({
                accessKeyId,
                secretAccessKey,
                sessionToken,
                region,
                role,
            });
        }
    }
    /**
     * Get AWS credentials from STS or user
     */
    async getCredentials() {
        if (this._sts) {
            return this._sts.getCredentials();
        }
        return {
            AccessKeyId: this._accessKeyId,
            SecretAccessKey: this._secretAccessKey,
            SessionToken: this._sessionToken,
        };
    }
}
exports.SellingPartnerApiAuth = SellingPartnerApiAuth;
var error_1 = require("./error");
Object.defineProperty(exports, "SellingPartnerApiAuthError", { enumerable: true, get: function () { return error_1.SellingPartnerApiAuthError; } });
var scope_1 = require("./types/scope");
Object.defineProperty(exports, "AuthorizationScope", { enumerable: true, get: function () { return scope_1.AuthorizationScope; } });
